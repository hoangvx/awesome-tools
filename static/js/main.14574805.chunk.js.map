{"version":3,"sources":["components/layouts/MasterLayout.js","views/ErrorPage.js","components/timer/CountDown.js","views/MobTimer.js","views/ScrumEstimationCard.js","App.js","serviceWorker.js","index.js"],"names":["MasterLayout","children","fluid","ErrorPage","CountDown","props","start","state","timer","duration","undefined","setInterval","setState","subtract","stop","clearInterval","handleKeyPress","hours","minutes","seconds","moment","this","auto","isRunning","_","padStart","className","Component","defaultProps","MobTimer","members","ScrumEstimationCard","addNewSession","sessions","title","push","value","onChange","target","type","onClick","outline","map","item","size","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14574805.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Container\n} from 'shards-react';\n\nconst MasterLayout = ({ children }) => (\n  <Container fluid>\n    {children}\n  </Container>\n)\n\nexport default MasterLayout;\n","import React from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\n\nconst ErrorPage = () => (\n  <Container>\n    <Row>\n      <Col>\n        <h1>404 PAGE NOT FOUND</h1>\n      </Col>\n    </Row>\n  </Container>\n)\n\nexport default ErrorPage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  Col\n} from 'shards-react';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props)\n    const { hours, minutes, seconds } = this.props;\n    this.state = {\n      duration: moment.duration(`PT${hours}H${minutes}M${seconds}S`),\n      timer: undefined,\n    }\n  }\n\n  start = () => {\n    let { timer, duration } = this.state;\n    if (timer === undefined) {\n      timer = setInterval(() => {\n        this.setState({ duration: duration.subtract(1, 'second') })\n      }, 1000);\n      this.setState({ timer });\n    }\n  }\n\n  stop = () => {\n    let { timer } = this.state;\n    if (timer !== undefined) {\n      clearInterval(timer);\n    }\n  }\n\n  handleKeyPress = () => {\n\n  }\n\n  componentDidMount() {\n    if (this.props.auto) {\n      this.start();\n    }\n  }\n\n  render() {\n    const { duration, timer } = this.state;\n    const isRunning = timer !== undefined;\n    const seconds = _.padStart(duration.seconds(), 2, 0);\n    const minutes = _.padStart(duration.minutes(), 2, 0);\n    const hours = _.padStart(duration.hours(), 2, 0);\n    return (\n      <Col className=\"text-center\">\n        <div className=\"d-inline-block\">\n          {hours}:{minutes}:{seconds}\n        </div>\n        <div>{isRunning ? 'running': 'stoped'}</div>\n      </Col>\n    )\n  }\n}\n\nCountDown.propTypes = {\n  hours: PropTypes.number,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  autoStart: PropTypes.bool\n}\n\nCountDown.defaultProps = {\n  hours: 0,\n  minutes: 15,\n  seconds: 0,\n  auto: true\n};\n\n\nexport default CountDown;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\nimport CountDown from '../components/timer/CountDown';\n\nclass MobTimer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      members: []\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col className=\"p-4\">\n            <h1>Mob Programing Timer</h1>\n          </Col>\n        </Row>\n        <Row>\n          <CountDown />\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MobTimer;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col,\n  Button, InputGroup, InputGroupAddon,\n  FormInput,\n  ListGroup,\n  ListGroupItem\n} from 'shards-react';\n\nclass ScrumEstimationCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      sessions: [\n        \"demo1\",\n        \"demo2\"\n      ],\n      title: '',  \n      members: []\n    }\n  }\n\n  addNewSession = () => {\n    let { sessions, title } = this.state;\n    sessions.push(title);\n    title = '';\n    this.setState({ sessions, title });\n  }\n\n  render() {\n    const { title, sessions } = this.state;\n    return (\n      <Container>\n        <Row>\n          <Col className=\"p-4\">\n            <h1>Point Card</h1>\n          </Col>\n        </Row>\n        <Row className=\"mb-3\">\n          <Col>\n            <InputGroup>\n              <FormInput\n                value={title}\n                onChange={({ target: { value: title } }) => this.setState({ title })}\n              />\n              <InputGroupAddon type=\"append\">\n                <Button onClick={() => this.addNewSession()} outline>Create Session</Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </Col>\n        </Row>\n        <Row className=\"\">\n          <Col>\n            <ListGroup>\n              {sessions.map(item => (\n                <ListGroupItem>\n                  <Row className=\"align-items-center\">\n                    <Col>\n                      <h5 className=\"mb-0\">{item}</h5>\n                    </Col>\n                    <Col className=\"text-right\">\n                      <Button outline size=\"sm\">X</Button>\n                    </Col>\n                  </Row>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default ScrumEstimationCard;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  // Link,\n  Switch,\n  // Redirect,\n  // useLocation\n} from 'react-router-dom';\n\nimport './assets/index.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\n\nimport { MasterLayout } from './components/layouts';\nimport ErrorPage from './views/ErrorPage';\nimport MobTimer from './views/MobTimer';\nimport ScrumEstimationCard from './views/ScrumEstimationCard';\n\nfunction App() {\n  return (\n    <Router>\n      <MasterLayout>\n        <Switch>\n          <Route exact path=\"/mob\">\n            <MobTimer />\n          </Route>\n          <Route exact path=\"/\">\n            <ScrumEstimationCard />\n          </Route>\n          <Route path=\"*\">\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </MasterLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}