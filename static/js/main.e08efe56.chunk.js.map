{"version":3,"sources":["components/layouts/MasterLayout.js","views/ErrorPage.js","components/timer/CountDown.js","views/MobTimer.js","views/ScrumEstimationCard.js","App.js","serviceWorker.js","index.js"],"names":["MasterLayout","children","fluid","ErrorPage","CountDown","props","start","state","timer","duration","undefined","setInterval","setState","subtract","stop","clearInterval","handleKeyPress","hours","minutes","seconds","moment","this","auto","isRunning","_","padStart","className","Component","defaultProps","MobTimer","members","DEFAULT_OPTIONS","points","members_option","toastr","options","positionClass","progressBar","timeOut","default_options","number_of_players","keyboardColorSetting","buttonColorSetting","pointColorSetting","keyboardColor","buttonColor","pointColor","ScrumEstimationCard","playNewRound","histories","selected_point","isReady","isValid","push","Array","Number","fill","play","value","idx","indexOf","valid_points","filter","p","selected_idxs","map","max","min","error","setDefault","Cookies","set","info","openSetting","calAvg","total","sum","Math","round","length","componentDidMount","document","title","getJSON","openInfo","xs","icon","faCog","onClick","open","toggle","form","sm","htmlFor","onChange","target","style","fontSize","o","key","inline","name","checked","faStar","faInfoCircle","height","theme","squared","block","size","reverse","h","i","App","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e08efe56.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Container\n} from 'shards-react';\n\nconst MasterLayout = ({ children }) => (\n  <Container fluid>\n    {children}\n  </Container>\n)\n\nexport default MasterLayout;\n","import React from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\n\nconst ErrorPage = () => (\n  <Container>\n    <Row>\n      <Col>\n        <h1>404 PAGE NOT FOUND</h1>\n      </Col>\n    </Row>\n  </Container>\n)\n\nexport default ErrorPage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  Col\n} from 'shards-react';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props)\n    const { hours, minutes, seconds } = this.props;\n    this.state = {\n      duration: moment.duration(`PT${hours}H${minutes}M${seconds}S`),\n      timer: undefined,\n    }\n  }\n\n  start = () => {\n    let { timer, duration } = this.state;\n    if (timer === undefined) {\n      timer = setInterval(() => {\n        this.setState({ duration: duration.subtract(1, 'second') })\n      }, 1000);\n      this.setState({ timer });\n    }\n  }\n\n  stop = () => {\n    let { timer } = this.state;\n    if (timer !== undefined) {\n      clearInterval(timer);\n    }\n  }\n\n  handleKeyPress = () => {\n\n  }\n\n  componentDidMount() {\n    if (this.props.auto) {\n      this.start();\n    }\n  }\n\n  render() {\n    const { duration, timer } = this.state;\n    const isRunning = timer !== undefined;\n    const seconds = _.padStart(duration.seconds(), 2, 0);\n    const minutes = _.padStart(duration.minutes(), 2, 0);\n    const hours = _.padStart(duration.hours(), 2, 0);\n    return (\n      <Col className=\"text-center\">\n        <div className=\"d-inline-block\">\n          {hours}:{minutes}:{seconds}\n        </div>\n        <div>{isRunning ? 'running': 'stoped'}</div>\n      </Col>\n    )\n  }\n}\n\nCountDown.propTypes = {\n  hours: PropTypes.number,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  autoStart: PropTypes.bool\n}\n\nCountDown.defaultProps = {\n  hours: 0,\n  minutes: 15,\n  seconds: 0,\n  auto: true\n};\n\n\nexport default CountDown;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\nimport CountDown from '../components/timer/CountDown';\n\nclass MobTimer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      members: []\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col className=\"p-4\">\n            <h1>Mob Programing Timer</h1>\n          </Col>\n        </Row>\n        <Row>\n          <CountDown />\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MobTimer;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col,\n  Button,\n  ListGroup, ListGroupItem,\n  Modal, ModalBody, ModalHeader, ModalFooter,\n  FormSelect, FormRadio\n} from 'shards-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faInfoCircle, faStar } from '@fortawesome/free-solid-svg-icons';\n\nimport Cookies from 'js-cookie';\nimport toastr from 'toastr';\nimport _ from 'lodash';\n\nconst DEFAULT_OPTIONS = 'srumpointcaloptions';\n\nconst points = [\n  0, 1, 2, 3, 5,\n  8, 13, 21, 34,\n  55, 89, 999\n]\n\nconst members_option = [2,3,4,5,6,7,8,9]\n\ntoastr.options = {\n  positionClass: 'toast-top-full-width',\n  progressBar: true,\n  timeOut: 1000\n}\n\nconst default_options = {\n  number_of_players: 4,\n  keyboardColorSetting: 'primary',\n  buttonColorSetting: 'primary',\n  pointColorSetting: 'secondary',\n  keyboardColor: 'primary',\n  buttonColor: 'primary',\n  pointColor: 'secondary',\n}\n\nclass ScrumEstimationCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      points,\n      number_of_players: members_option[2],\n      histories: [],\n      selected_point: [undefined, undefined, undefined, undefined],\n      valid_points: [],\n      isReady: false,\n      openInfo: false,\n      openSetting: false,\n      keyboardColorSetting: 'primary',\n      buttonColorSetting: 'primary',\n      pointColorSetting: 'secondary',\n      keyboardColor: 'primary',\n      buttonColor: 'primary',\n      pointColor: 'secondary',\n    }\n  }\n\n  playNewRound = () => {\n    let { histories, selected_point, isReady, isValid } = this.state;\n    if (isValid && isReady) {\n      histories.push(selected_point);\n    }\n    this.setState({\n      selected_point: Array(Number(this.state.number_of_players)).fill(undefined),\n      isValid: false,\n      isReady: false,\n      histories\n    })\n  }\n\n  play = (value) => {\n    let { selected_point } = this.state;\n    const idx = selected_point.indexOf(undefined);\n    if (idx !== -1) {\n      selected_point[idx] = value;\n      const isReady = selected_point.indexOf(undefined) === -1;\n      const valid_points = _.filter(selected_point, p => p !== 999 && p !== undefined);\n      const selected_idxs = valid_points.map(p => points.indexOf(p));\n      const isValid = (_.max(selected_idxs) || 0) - (_.min(selected_idxs) || 0) < 3;\n      if (isReady && !isValid) {\n        toastr.error('Invalid Points Set!!!');\n      }\n      this.setState({ selected_point, valid_points, isReady, isValid });\n    }\n  }\n\n  setDefault = () => {\n    const options = {\n      keyboardColor: this.state.keyboardColorSetting,\n      buttonColor: this.state.buttonColorSetting,\n      pointColor: this.state.pointColorSetting,\n      keyboardColorSetting: this.state.keyboardColorSetting,\n      buttonColorSetting: this.state.buttonColorSetting,\n      pointColorSetting: this.state.pointColorSetting,\n      number_of_players: this.state.number_of_players,\n    }\n\n    Cookies.set(DEFAULT_OPTIONS, options);\n    toastr.info(`Number of player's defaut is set to ${this.state.number_of_players}`);\n    this.setState({\n      ...options,\n      openSetting: false, \n    });\n    this.playNewRound();\n  }\n\n  \n  calAvg = (points) => {\n    const valid_points = _.filter(points, p => p !== 999);\n    const total = _.sum(valid_points);\n    return Math.round(total / valid_points.length) || 0;\n  }\n  \n  componentDidMount = () => {\n    document.title = 'Estimation Card | Awesome Tools';\n    const options = Cookies.getJSON(DEFAULT_OPTIONS) || default_options;\n    this.setState({\n      ...options,\n      selected_point: Array(Number(options.number_of_players)).fill(undefined),\n    })\n  }\n  render() {\n    const { \n      points, number_of_players, histories, \n      selected_point, valid_points, \n      isReady, isValid,\n      openInfo, openSetting,\n      keyboardColor, buttonColor, pointColor\n    } = this.state;\n    return (\n      <Container>\n        <Row>\n          <Col xs=\"10\" className=\"mt-4 px-0\">\n            <h3 className=\"text-info\">Estimations Card</h3>\n          </Col>\n          <Col xs=\"2\" className=\"mt-4 px-0 d-flex justify-content-end align-items-start\">\n            <FontAwesomeIcon icon={faCog} className=\"mx-2\" onClick={() => this.setState({ openSetting: true })}/>  \n            <Modal className=\"modal-dialog-centered\" open={openSetting} toggle={() => this.setState({ openSetting: !openSetting })}>\n              <ModalHeader>Settings</ModalHeader>\n              <ModalBody>\n                <Row form>\n                  <Col sm=\"6\">\n                    <label htmlFor=\"numberOfPlayers\">Number of players</label>\n                    <FormSelect\n                      value={number_of_players}\n                      onChange={({ target: { value: number_of_players }}) => this.setState({ number_of_players })}\n                      style={{ fontSize: '16px' }}>\n                      {members_option.map((o, key) => (\n                        <option key={key} value={o}>{o}</option>\n                      ))}\n                    </FormSelect>\n                  </Col>\n                  <Col sm=\"6\">\n                    <p className=\"mb-2 mt-2\">Points color:</p>\n                    <FormRadio\n                      inline\n                      name=\"pointColor\"\n                      checked={this.state.pointColorSetting === \"primary\"}\n                      onChange={() => {\n                        this.setState({ pointColorSetting: 'primary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-primary\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"pointColor\"\n                      checked={this.state.pointColorSetting === \"warning\"}\n                      onChange={() => {\n                        this.setState({ pointColorSetting: 'warning' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-warning\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"pointColor\"\n                      checked={this.state.pointColorSetting === \"success\"}\n                      onChange={() => {\n                        this.setState({ pointColorSetting: 'success' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-success\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"pointColor\"\n                      checked={this.state.pointColorSetting === \"dark\"}\n                      onChange={() => {\n                        this.setState({ pointColorSetting: 'dark' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-dark\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"pointColor\"\n                      checked={this.state.pointColorSetting === \"secondary\"}\n                      onChange={() => {\n                        this.setState({ pointColorSetting: 'secondary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-secondary\" icon={faStar}/>\n                    </FormRadio>\n                  </Col>\n                  <Col sm=\"6\">\n                    <p className=\"mb-2 mt-2\">Card (keyboard) color:</p>\n                    <FormRadio\n                      inline\n                      name=\"keyboardColor\"\n                      checked={this.state.keyboardColorSetting === \"primary\"}\n                      onChange={() => {\n                        this.setState({ keyboardColorSetting: 'primary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-primary\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"keyboardColor\"\n                      checked={this.state.keyboardColorSetting === \"warning\"}\n                      onChange={() => {\n                        this.setState({ keyboardColorSetting: 'warning' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-warning\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"keyboardColor\"\n                      checked={this.state.keyboardColorSetting === \"success\"}\n                      onChange={() => {\n                        this.setState({ keyboardColorSetting: 'success' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-success\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"keyboardColor\"\n                      checked={this.state.keyboardColorSetting === \"dark\"}\n                      onChange={() => {\n                        this.setState({ keyboardColorSetting: 'dark' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-dark\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"keyboardColor\"\n                      checked={this.state.keyboardColorSetting === \"secondary\"}\n                      onChange={() => {\n                        this.setState({ keyboardColorSetting: 'secondary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-secondary\" icon={faStar}/>\n                    </FormRadio>\n                  </Col>\n                  <Col sm=\"6\">\n                    <p className=\"mb-2 mt-2\">Button color:</p>\n                    <FormRadio\n                      inline\n                      name=\"buttonColor\"\n                      checked={this.state.buttonColorSetting === \"primary\"}\n                      onChange={() => {\n                        this.setState({ buttonColorSetting: 'primary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-primary\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"buttonColor\"\n                      checked={this.state.buttonColorSetting === \"warning\"}\n                      onChange={() => {\n                        this.setState({ buttonColorSetting: 'warning' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-warning\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"buttonColor\"\n                      checked={this.state.buttonColorSetting === \"success\"}\n                      onChange={() => {\n                        this.setState({ buttonColorSetting: 'success' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-success\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"buttonColor\"\n                      checked={this.state.buttonColorSetting === \"dark\"}\n                      onChange={() => {\n                        this.setState({ buttonColorSetting: 'dark' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-dark\" icon={faStar}/>\n                    </FormRadio>\n                    <FormRadio\n                      inline\n                      name=\"buttonColor\"\n                      checked={this.state.buttonColorSetting === \"secondary\"}\n                      onChange={() => {\n                        this.setState({ buttonColorSetting: 'secondary' });\n                      }}\n                    >\n                      <FontAwesomeIcon className=\"text-secondary\" icon={faStar}/>\n                    </FormRadio>\n                  </Col>\n                </Row>\n                <ModalFooter className=\"px-0\">\n                  <Button onClick={() => this.setDefault()}>Save</Button>\n                </ModalFooter>\n              </ModalBody>\n            </Modal>\n            <FontAwesomeIcon icon={faInfoCircle} className=\"ml-2\" onClick={() => this.setState({ openInfo: true })}/>  \n            <Modal className=\"modal-dialog-centered\" open={openInfo} toggle={() => this.setState({ openInfo: !openInfo })}>\n              <ModalHeader>How To Use!</ModalHeader>\n              <ModalBody>\n                <span>\n                  <strong>1:</strong> Update number of player to fix your team size\n                </span>\n                <br/>\n                <span>\n                  <strong>2:</strong> Press on the point that choosed\n                </span>\n                <br/>\n                <span>\n                  <strong>3:</strong> Average point will display when you  enter all member's point\n                </span>\n                <br/>\n                <span>\n                  <strong>4:</strong> You can start over by click on button at the bottom\n                </span>\n              </ModalBody>\n            </Modal>\n          </Col>\n        </Row>\n        { number_of_players && (\n          <Row className=\"mb-3\">\n            {!(isReady && isValid) && selected_point.map((p, idx) => (\n              <Col key={idx} className=\"p-0\" style={{ height: '10vh' }}>\n                <Button \n                  theme={ !isValid && isReady && (p === _.min(valid_points) || p === _.max(valid_points)) ? 'danger': pointColor } \n                  squared block className=\"h-100 border-light\"\n                  style={{ fontSize: '2em' }}\n                >{p === undefined ? '-' : p === 999 ? '?' : p}</Button>\n              </Col>\n            ))}\n            {isReady && isValid && (\n              <Col className=\"p-0 d-flex justify-content-center align-items-center\" style={{ height: '10vh' }}>\n                  <h1 className=\"d-flex display-3 text-success\">\n                    {this.calAvg(selected_point)}\n                  </h1>\n              </Col>\n            )}\n          </Row>\n        )}\n        <Row className=\"mb-3\">\n          { points.map((p, idx) => (\n            <Col key={idx} xs=\"4\" className=\"px-0 border border-light\" style={{ height: '10vh' }}>\n              <Button \n                block squared className=\"h-100\" theme={keyboardColor} style={{ fontSize: '2em' }}\n                onClick={() => this.play(p)}>\n                {p === 999 ? '?' : p}\n              </Button>\n            </Col>\n          )) }\n        </Row>\n        <Row className=\"mb-3\">\n          <Col className=\"px-0\">\n            <Button block theme={buttonColor} size=\"lg\" onClick={() => this.playNewRound()}>Start Over</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"px-0\">\n            <ListGroup>\n              {histories.reverse().map((h, idx) => (\n                <ListGroupItem className=\"d-flex\" key={idx}>\n                  <Row className=\"w-100\">\n                  { h.map((p, i) => (\n                    <Col className=\"d-flex justify-content-center\" key={i}>{p === 999 ? '?' : p}</Col>\n                  )) }\n                  <Col className=\"d-flex justify-content-center text-success\">\n                    <strong>{this.calAvg(h)}</strong>\n                  </Col>\n                  </Row>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default ScrumEstimationCard;","import React from 'react';\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Route,\n  // Link,\n  Switch,\n  Redirect,\n  // useLocation\n} from 'react-router-dom';\n\nimport './assets/index.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\nimport \"toastr/build/toastr.min.css\";\n\nimport { MasterLayout } from './components/layouts';\nimport ErrorPage from './views/ErrorPage';\nimport MobTimer from './views/MobTimer';\nimport ScrumEstimationCard from './views/ScrumEstimationCard';\n\nfunction App() {\n  return (\n    <Router>\n      <MasterLayout>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/estimation_card\" />\n          </Route>\n          <Route exact path=\"/mob\">\n            <MobTimer />\n          </Route>\n          <Route exact path=\"/estimation_card\">\n            <ScrumEstimationCard />\n          </Route>\n          <Route path=\"/*\">\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </MasterLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}