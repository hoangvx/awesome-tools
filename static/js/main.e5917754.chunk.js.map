{"version":3,"sources":["components/layouts/MasterLayout.js","views/ErrorPage.js","components/timer/CountDown.js","views/MobTimer.js","views/ScrumEstimationCard.js","App.js","serviceWorker.js","index.js"],"names":["MasterLayout","children","fluid","ErrorPage","CountDown","props","start","state","timer","duration","undefined","setInterval","setState","subtract","stop","clearInterval","handleKeyPress","hours","minutes","seconds","moment","this","auto","isRunning","_","padStart","className","Component","defaultProps","MobTimer","members","DEFAULT_NUMBER_OF_PLAYPER","points","ScrumEstimationCard","playNewRound","histories","selected_point","indexOf","push","Array","Number","number_of_players","fill","play","value","idx","setDefault","Cookies","set","toastr","info","calAvg","valid_points","filter","p","total","sum","Math","round","length","componentDidMount","document","title","get","open","isCal","xs","outline","theme","size","onClick","toggle","type","onChange","target","map","key","style","height","disabled","squared","block","fontSize","reverse","h","i","App","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iMAWeA,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,kBAAC,IAAD,CAAWC,OAAK,GACbD,ICQUE,EAVG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,sD,0ECDFC,E,YACJ,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KAQRC,MAAQ,WAAO,IAAD,EACc,EAAKC,MAAzBC,EADM,EACNA,MAAOC,EADD,EACCA,cACCC,IAAVF,IACFA,EAAQG,aAAY,WAClB,EAAKC,SAAS,CAAEH,SAAUA,EAASI,SAAS,EAAG,cAC9C,KACH,EAAKD,SAAS,CAAEJ,YAfD,EAmBnBM,KAAO,WAAO,IACNN,EAAU,EAAKD,MAAfC,WACQE,IAAVF,GACFO,cAAcP,IAtBC,EA0BnBQ,eAAiB,aA1BE,MAEmB,EAAKX,MAAjCY,EAFS,EAETA,MAAOC,EAFE,EAEFA,QAASC,EAFP,EAEOA,QAFP,OAGjB,EAAKZ,MAAQ,CACXE,SAAUW,IAAOX,SAAP,YAAqBQ,EAArB,YAA8BC,EAA9B,YAAyCC,EAAzC,MACVX,WAAOE,GALQ,E,iFA+BbW,KAAKhB,MAAMiB,MACbD,KAAKf,U,+BAIC,IAAD,EACqBe,KAAKd,MAAzBE,EADD,EACCA,SACFc,OAAsBb,IAFrB,EACWF,MAEZW,EAAUK,IAAEC,SAAShB,EAASU,UAAW,EAAG,GAC5CD,EAAUM,IAAEC,SAAShB,EAASS,UAAW,EAAG,GAC5CD,EAAQO,IAAEC,SAAShB,EAASQ,QAAS,EAAG,GAC9C,OACE,kBAAC,IAAD,CAAKS,UAAU,eACb,yBAAKA,UAAU,kBACZT,EADH,IACWC,EADX,IACqBC,GAErB,6BAAMI,EAAY,UAAW,e,GAhDbI,aA6DxBvB,EAAUwB,aAAe,CACvBX,MAAO,EACPC,QAAS,GACTC,QAAS,EACTG,MAAM,GAIOlB,QChDAyB,E,YAtBb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KACDE,MAAQ,CACXuB,QAAS,IAHM,E,sEAOjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKJ,UAAU,OACb,sDAGJ,kBAAC,IAAD,KACE,kBAAC,EAAD,Y,GAhBaC,a,kCCQjBI,EAA4B,OAE5BC,EAAS,CACb,EAAG,EAAG,EAAG,EAAG,EACZ,EAAG,GAAI,GAAI,GACX,GAAI,GAAI,KAkKKC,E,YA9Jb,WAAY5B,GAAQ,IAAD,8BACjB,4CAAMA,KAUR6B,aAAe,WAAO,IAAD,EACiB,EAAK3B,MAAnC4B,EADa,EACbA,UAAWC,EADE,EACFA,gBAC0B,IAAvCA,EAAeC,aAAQ3B,IACzByB,EAAUG,KAAKF,GAEjB,EAAKxB,SAAS,CACZwB,eAAgBG,MAAMC,OAAO,EAAKjC,MAAMkC,oBAAoBC,UAAKhC,GACjEyB,eAlBe,EAsBnBQ,KAAO,SAACC,GAAW,IACXR,EAAmB,EAAK7B,MAAxB6B,eACAS,EAAMT,EAAeC,aAAQ3B,IACtB,IAATmC,IACFT,EAAeS,GAAOD,EACtB,EAAKhC,SAAS,CAAEwB,qBA3BD,EA+BnBU,WAAa,WACXC,IAAQC,IAAIjB,EAA2B,EAAKxB,MAAMkC,mBAClDQ,IAAOC,KAAP,8CAAmD,EAAK3C,MAAMkC,qBAjC7C,EAqCnBU,OAAS,SAACnB,GACR,IAAMoB,EAAe5B,IAAE6B,OAAOrB,GAAQ,SAAAsB,GAAC,OAAU,MAANA,KACrCC,EAAQ/B,IAAEgC,IAAIJ,GACpB,OAAOK,KAAKC,MAAMH,EAAQH,EAAaO,SAxCtB,EA2CnBC,kBAAoB,WAClBC,SAASC,MAAQ,kCACjB,IAAMrB,EAAoBD,OAAOO,IAAQgB,IAAIhC,KAA+B,EAC5E,EAAKnB,SAAS,CACZ6B,oBACAL,eAAgBG,MAAMC,OAAOC,IAAoBC,UAAKhC,MA9CxD,EAAKH,MAAQ,CACXyB,SACAS,kBAAmB,EACnBN,UAAW,GACXC,eAAgB,MAAC1B,OAAWA,OAAWA,OAAWA,GAClDsD,MAAM,GAPS,E,sEAmDT,IAAD,SACgE3C,KAAKd,MAApEyB,EADD,EACCA,OAAQS,EADT,EACSA,kBAAmBN,EAD5B,EAC4BA,UAAWC,EADvC,EACuCA,eAAgB4B,EADvD,EACuDA,KACxDC,GAA+C,IAAvC7B,EAAeC,aAAQ3B,GACrC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKwD,GAAG,KAAKxC,UAAU,aACrB,wBAAIA,UAAU,aAAd,qBAEF,kBAAC,IAAD,CAAKwC,GAAG,IAAIxC,UAAU,2DACpB,kBAAC,IAAD,CAAQyC,SAAO,EAACC,MAAM,YAAYC,KAAK,KAAKC,QAAS,kBAAM,EAAK1D,SAAS,CAAEoD,MAAM,MAAjF,KACA,kBAAC,IAAD,CAAOtC,UAAU,wBAAwBsC,KAAMA,EAAMO,OAAQ,kBAAM,EAAK3D,SAAS,CAAEoD,MAAOA,MACxF,kBAAC,IAAD,oBACA,kBAAC,IAAD,KACE,8BACE,sCADF,kDAGA,6BACA,8BACE,sCADF,oCAGA,6BACA,8BACE,sCADF,kEAGA,6BACA,8BACE,sCADF,4DAQR,kBAAC,IAAD,CAAKtC,UAAU,QACb,kBAAC,IAAD,CAAKwC,GAAG,KAAKxC,UAAU,QACrB,2BAAOA,UAAU,kBAAjB,4BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE8C,KAAK,SACL5B,MAAOH,EACPgC,SAAU,gBAAoBhC,EAApB,EAAGiC,OAAU9B,MAAb,OAA8C,EAAKhC,SAAS,CAAE6B,oBAAmBL,eAAgBG,MAAMC,OAAOC,IAAoBC,UAAKhC,QAEnJ,kBAAC,IAAD,CAAiB8D,KAAK,UACpB,kBAAC,IAAD,CAAQJ,MAAM,QAAQE,QAAS,kBAAM,EAAKxB,eAA1C,sBAKNL,GACA,kBAAC,IAAD,CAAKf,UAAU,SACXuC,GAAS7B,EAAeuC,KAAI,SAACrB,EAAGT,GAAJ,OAC5B,kBAAC,IAAD,CAAK+B,IAAK/B,EAAKnB,UAAU,MAAMmD,MAAO,CAAEC,OAAQ,SAC9C,kBAAC,IAAD,CACEV,MAAM,QAAQW,UAAQ,EAACC,SAAO,EAACC,OAAK,EAACvD,UAAU,QAC/CmD,MAAO,CAAEK,SAAU,aACbxE,IAAN4C,EAAkB,IAAY,MAANA,EAAY,IAAMA,OAG/CW,GACC,kBAAC,IAAD,CAAKvC,UAAU,uDAAuDmD,MAAO,CAAEC,OAAQ,SACnF,wBAAIpD,UAAU,iCACXL,KAAK8B,OAAOf,MAMzB,kBAAC,IAAD,CAAKV,UAAU,QACXM,EAAO2C,KAAI,SAACrB,EAAGT,GAAJ,OACX,kBAAC,IAAD,CAAK+B,IAAK/B,EAAKqB,GAAG,IAAIxC,UAAU,2BAA2BmD,MAAO,CAAEC,OAAQ,SAC1E,kBAAC,IAAD,CACEG,OAAK,EAACD,SAAO,EAACtD,UAAU,QAAQmD,MAAO,CAAEK,SAAU,OACnDZ,QAAS,kBAAM,EAAK3B,KAAKW,KAClB,MAANA,EAAY,IAAMA,QAK3B,kBAAC,IAAD,CAAK5B,UAAU,QACb,kBAAC,IAAD,CAAKA,UAAU,QACb,kBAAC,IAAD,CAAQuD,OAAK,EAACZ,KAAK,KAAKC,QAAS,kBAAM,EAAKpC,iBAA5C,gBAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKR,UAAU,QACb,kBAAC,IAAD,KACGS,EAAUgD,UAAUR,KAAI,SAACS,EAAGvC,GAAJ,OACvB,kBAAC,IAAD,CAAenB,UAAU,SAASkD,IAAK/B,GACrC,kBAAC,IAAD,CAAKnB,UAAU,SACb0D,EAAET,KAAI,SAACrB,EAAG+B,GAAJ,OACN,kBAAC,IAAD,CAAK3D,UAAU,gCAAgCkD,IAAKS,GAAU,MAAN/B,EAAY,IAAMA,MAE5E,kBAAC,IAAD,CAAK5B,UAAU,8CACb,gCAAS,EAAKyB,OAAOiC,kB,GAlJPzD,aCsBnB2D,MAvBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUC,GAAG,sBAEf,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,oBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,MACV,kBAAC,EAAD,WCxBQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnC,SAASoC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e5917754.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Container\n} from 'shards-react';\n\nconst MasterLayout = ({ children }) => (\n  <Container fluid>\n    {children}\n  </Container>\n)\n\nexport default MasterLayout;\n","import React from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\n\nconst ErrorPage = () => (\n  <Container>\n    <Row>\n      <Col>\n        <h1>404 PAGE NOT FOUND</h1>\n      </Col>\n    </Row>\n  </Container>\n)\n\nexport default ErrorPage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  Col\n} from 'shards-react';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props)\n    const { hours, minutes, seconds } = this.props;\n    this.state = {\n      duration: moment.duration(`PT${hours}H${minutes}M${seconds}S`),\n      timer: undefined,\n    }\n  }\n\n  start = () => {\n    let { timer, duration } = this.state;\n    if (timer === undefined) {\n      timer = setInterval(() => {\n        this.setState({ duration: duration.subtract(1, 'second') })\n      }, 1000);\n      this.setState({ timer });\n    }\n  }\n\n  stop = () => {\n    let { timer } = this.state;\n    if (timer !== undefined) {\n      clearInterval(timer);\n    }\n  }\n\n  handleKeyPress = () => {\n\n  }\n\n  componentDidMount() {\n    if (this.props.auto) {\n      this.start();\n    }\n  }\n\n  render() {\n    const { duration, timer } = this.state;\n    const isRunning = timer !== undefined;\n    const seconds = _.padStart(duration.seconds(), 2, 0);\n    const minutes = _.padStart(duration.minutes(), 2, 0);\n    const hours = _.padStart(duration.hours(), 2, 0);\n    return (\n      <Col className=\"text-center\">\n        <div className=\"d-inline-block\">\n          {hours}:{minutes}:{seconds}\n        </div>\n        <div>{isRunning ? 'running': 'stoped'}</div>\n      </Col>\n    )\n  }\n}\n\nCountDown.propTypes = {\n  hours: PropTypes.number,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  autoStart: PropTypes.bool\n}\n\nCountDown.defaultProps = {\n  hours: 0,\n  minutes: 15,\n  seconds: 0,\n  auto: true\n};\n\n\nexport default CountDown;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\nimport CountDown from '../components/timer/CountDown';\n\nclass MobTimer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      members: []\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col className=\"p-4\">\n            <h1>Mob Programing Timer</h1>\n          </Col>\n        </Row>\n        <Row>\n          <CountDown />\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MobTimer;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col,\n  Button,\n  FormInput,\n  InputGroup, InputGroupAddon,\n  ListGroup, ListGroupItem,\n  Modal, ModalBody, ModalHeader\n} from 'shards-react';\n\nimport Cookies from 'js-cookie';\nimport toastr from 'toastr';\nimport _ from 'lodash';\n\nconst DEFAULT_NUMBER_OF_PLAYPER = 'dnop';\n\nconst points = [\n  0, 1, 2, 3, 5,\n  8, 13, 21, 34,\n  55, 89, 999\n]\n\nclass ScrumEstimationCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      points,\n      number_of_players: 4,\n      histories: [],\n      selected_point: [undefined, undefined, undefined, undefined],\n      open: false\n    }\n  }\n\n  playNewRound = () => {\n    let { histories, selected_point } = this.state;\n    if (selected_point.indexOf(undefined) === -1) {\n      histories.push(selected_point);\n    }\n    this.setState({\n      selected_point: Array(Number(this.state.number_of_players)).fill(undefined),\n      histories\n    })\n  }\n\n  play = (value) => {\n    let { selected_point } = this.state;\n    const idx = selected_point.indexOf(undefined);\n    if (idx !== -1) {\n      selected_point[idx] = value;\n      this.setState({ selected_point });\n    }\n  }\n\n  setDefault = () => {\n    Cookies.set(DEFAULT_NUMBER_OF_PLAYPER, this.state.number_of_players);\n    toastr.info(`Number of player's defaut is set to ${this.state.number_of_players}`);\n  }\n\n  \n  calAvg = (points) => {\n    const valid_points = _.filter(points, p => p !== 999);\n    const total = _.sum(valid_points);\n    return Math.round(total / valid_points.length);\n  }\n  \n  componentDidMount = () => {\n    document.title = 'Estimation Card | Awesome Tools';\n    const number_of_players = Number(Cookies.get(DEFAULT_NUMBER_OF_PLAYPER)) || 4;\n    this.setState({ \n      number_of_players,\n      selected_point: Array(Number(number_of_players)).fill(undefined),\n    })\n  }\n  render() {\n    const { points, number_of_players, histories, selected_point, open } = this.state;\n    const isCal = selected_point.indexOf(undefined) === -1;\n    return (\n      <Container>\n        <Row>\n          <Col xs=\"10\" className=\"mt-4 px-0\">\n            <h1 className=\"text-info\">Estimations Card</h1>\n          </Col>\n          <Col xs=\"2\" className=\"mt-4 px-0 d-flex justify-content-end align-items-center\">\n            <Button outline theme=\"secondary\" size=\"sm\" onClick={() => this.setState({ open: true })}>?</Button>\n            <Modal className=\"modal-dialog-centered\" open={open} toggle={() => this.setState({ open: !open })}>\n              <ModalHeader>How To Use!</ModalHeader>\n              <ModalBody>\n                <span>\n                  <strong>1:</strong> Update number of player to fix your team size\n                </span>\n                <br/>\n                <span>\n                  <strong>2:</strong> Press on the point that choosed\n                </span>\n                <br/>\n                <span>\n                  <strong>3:</strong> Average point will display when you  enter all member's point\n                </span>\n                <br/>\n                <span>\n                  <strong>4:</strong> You can start over by click on button at the bottom\n                </span>\n              </ModalBody>\n            </Modal>\n          </Col>\n        </Row>\n        {/* Welcome Panel for first visited */}\n        <Row className=\"mb-3\">\n          <Col xs=\"12\" className=\"px-0\">\n            <label className=\"text-secondary\">Change number of players</label>\n            <InputGroup>\n              <FormInput\n                type=\"number\"\n                value={number_of_players}\n                onChange={({ target: { value: number_of_players } }) => this.setState({ number_of_players, selected_point: Array(Number(number_of_players)).fill(undefined) })}\n              />\n              <InputGroupAddon type=\"append\">\n                <Button theme=\"light\" onClick={() => this.setDefault()}>Set As Default</Button>\n              </InputGroupAddon>\n            </InputGroup>\n          </Col>\n        </Row>\n        { number_of_players && (\n          <Row className=\"mb-3\">\n            {!isCal && selected_point.map((p, idx) => (\n              <Col key={idx} className=\"p-0\" style={{ height: '10vh' }}>\n                <Button \n                  theme=\"light\" disabled squared block className=\"h-100\"\n                  style={{ fontSize: '2em' }}\n                >{p === undefined ? '-' : p === 999 ? '?' : p}</Button>\n              </Col>\n            ))}\n            {isCal && (\n              <Col className=\"p-0 d-flex justify-content-center align-items-center\" style={{ height: '10vh' }}>\n                  <h1 className=\"d-flex text-success display-3\">\n                    {this.calAvg(selected_point)}\n                  </h1>\n              </Col>\n            )}\n          </Row>\n        )}\n        <Row className=\"mb-3\">\n          { points.map((p, idx) => (\n            <Col key={idx} xs=\"4\" className=\"px-0 border border-light\" style={{ height: '10vh' }}>\n              <Button \n                block squared className=\"h-100\" style={{ fontSize: '2em' }}\n                onClick={() => this.play(p)}>\n                {p === 999 ? '?' : p}\n              </Button>\n            </Col>\n          )) }\n        </Row>\n        <Row className=\"mb-3\">\n          <Col className=\"px-0\">\n            <Button block size=\"lg\" onClick={() => this.playNewRound()}>Start Over</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"px-0\">\n            <ListGroup>\n              {histories.reverse().map((h, idx) => (\n                <ListGroupItem className=\"d-flex\" key={idx}>\n                  <Row className=\"w-100\">\n                  { h.map((p, i) => (\n                    <Col className=\"d-flex justify-content-center\" key={i}>{p === 999 ? '?' : p}</Col>\n                  )) }\n                  <Col className=\"d-flex justify-content-center text-success\">\n                    <strong>{this.calAvg(h)}</strong>\n                  </Col>\n                  </Row>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default ScrumEstimationCard;","import React from 'react';\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Route,\n  // Link,\n  Switch,\n  Redirect,\n  // useLocation\n} from 'react-router-dom';\n\nimport './assets/index.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\nimport \"toastr/build/toastr.min.css\";\n\nimport { MasterLayout } from './components/layouts';\nimport ErrorPage from './views/ErrorPage';\nimport MobTimer from './views/MobTimer';\nimport ScrumEstimationCard from './views/ScrumEstimationCard';\n\nfunction App() {\n  return (\n    <Router>\n      <MasterLayout>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/estimation_card\" />\n          </Route>\n          <Route exact path=\"/mob\">\n            <MobTimer />\n          </Route>\n          <Route exact path=\"/estimation_card\">\n            <ScrumEstimationCard />\n          </Route>\n          <Route path=\"/*\">\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </MasterLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}