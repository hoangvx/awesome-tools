{"version":3,"sources":["components/layouts/MasterLayout.js","views/ErrorPage.js","components/timer/CountDown.js","views/MobTimer.js","views/ScrumEstimationCard.js","App.js","serviceWorker.js","index.js"],"names":["MasterLayout","children","fluid","ErrorPage","CountDown","props","start","state","timer","duration","undefined","setInterval","setState","subtract","stop","clearInterval","handleKeyPress","hours","minutes","seconds","moment","this","auto","isRunning","_","padStart","className","Component","defaultProps","MobTimer","members","DEFAULT_OPTIONS","points","members_option","toastr","options","positionClass","progressBar","timeOut","default_options","number_of_players","darkMode","ScrumEstimationCard","playNewRound","histories","selected_point","isReady","isValid","push","Array","Number","fill","play","value","idx","indexOf","valid_points","filter","p","selected_idxs","map","max","min","error","setDefault","Cookies","set","success","openSetting","settingNumber","calAvg","total","sum","Math","round","length","componentDidMount","document","title","getJSON","openInfo","keyBoardClass","join","startBtnTheme","pointBtnTheme","adjSize","xs","icon","faCog","onClick","open","toggle","form","sm","htmlFor","onChange","target","style","fontSize","o","key","checked","faInfoCircle","height","theme","squared","block","border","onTouchEnd","size","reverse","h","i","App","exact","path","to","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf1394e9.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Container\n} from 'shards-react';\n\nconst MasterLayout = ({ children }) => (\n  <Container fluid>\n    {children}\n  </Container>\n)\n\nexport default MasterLayout;\n","import React from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\n\nconst ErrorPage = () => (\n  <Container>\n    <Row>\n      <Col>\n        <h1>404 PAGE NOT FOUND</h1>\n      </Col>\n    </Row>\n  </Container>\n)\n\nexport default ErrorPage;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  Col\n} from 'shards-react';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nclass CountDown extends Component {\n  constructor(props) {\n    super(props)\n    const { hours, minutes, seconds } = this.props;\n    this.state = {\n      duration: moment.duration(`PT${hours}H${minutes}M${seconds}S`),\n      timer: undefined,\n    }\n  }\n\n  start = () => {\n    let { timer, duration } = this.state;\n    if (timer === undefined) {\n      timer = setInterval(() => {\n        this.setState({ duration: duration.subtract(1, 'second') })\n      }, 1000);\n      this.setState({ timer });\n    }\n  }\n\n  stop = () => {\n    let { timer } = this.state;\n    if (timer !== undefined) {\n      clearInterval(timer);\n    }\n  }\n\n  handleKeyPress = () => {\n\n  }\n\n  componentDidMount() {\n    if (this.props.auto) {\n      this.start();\n    }\n  }\n\n  render() {\n    const { duration, timer } = this.state;\n    const isRunning = timer !== undefined;\n    const seconds = _.padStart(duration.seconds(), 2, 0);\n    const minutes = _.padStart(duration.minutes(), 2, 0);\n    const hours = _.padStart(duration.hours(), 2, 0);\n    return (\n      <Col className=\"text-center\">\n        <div className=\"d-inline-block\">\n          {hours}:{minutes}:{seconds}\n        </div>\n        <div>{isRunning ? 'running': 'stoped'}</div>\n      </Col>\n    )\n  }\n}\n\nCountDown.propTypes = {\n  hours: PropTypes.number,\n  minutes: PropTypes.number,\n  seconds: PropTypes.number,\n  autoStart: PropTypes.bool\n}\n\nCountDown.defaultProps = {\n  hours: 0,\n  minutes: 15,\n  seconds: 0,\n  auto: true\n};\n\n\nexport default CountDown;","import React, { Component } from 'react';\nimport { \n  Container, Row, Col\n} from 'shards-react';\nimport CountDown from '../components/timer/CountDown';\n\nclass MobTimer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      members: []\n    }\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col className=\"p-4\">\n            <h1>Mob Programing Timer</h1>\n          </Col>\n        </Row>\n        <Row>\n          <CountDown />\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default MobTimer;","import React, { Component, Fragment } from 'react';\nimport { \n  Container, Row, Col,\n  Button,\n  ListGroup, ListGroupItem,\n  Modal, ModalBody, ModalHeader, ModalFooter,\n  FormSelect, FormCheckbox\n} from 'shards-react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCog, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport Cookies from 'js-cookie';\nimport toastr from 'toastr';\nimport _ from 'lodash';\n\n// import Timer from '../components/timer/Timer';\n\nconst DEFAULT_OPTIONS = 'estimation-settings';\n\nconst points = [\n  0, 1, 2, 3, 5,\n  8, 13, 21, 34,\n  55, 89, 999\n]\n\nconst members_option = [2,3,4,5,6,7,8,9]\n\ntoastr.options = {\n  positionClass: 'toast-top-full-width',\n  progressBar: true,\n  timeOut: 1000\n}\n\nconst default_options = {\n  number_of_players: 4,\n  darkMode: false,\n}\n\nclass ScrumEstimationCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      points,\n      number_of_players: members_option[2],\n      histories: [],\n      selected_point: [undefined, undefined, undefined, undefined],\n      valid_points: [],\n      isReady: false,\n      openInfo: false,\n      openSetting: false,\n      darkMode: false,\n    }\n  }\n\n  playNewRound = () => {\n    let { histories, selected_point, isReady, isValid } = this.state;\n    if (isValid && isReady) {\n      histories.push(selected_point);\n    }\n    this.setState({\n      selected_point: Array(Number(this.state.number_of_players)).fill(undefined),\n      isValid: false,\n      isReady: false,\n      histories\n    })\n  }\n\n  play = (value) => {\n    let { selected_point } = this.state;\n    const idx = selected_point.indexOf(undefined);\n    if (idx !== -1) {\n      selected_point[idx] = value;\n      const isReady = selected_point.indexOf(undefined) === -1;\n      const valid_points = _.filter(selected_point, p => p !== 999 && p !== undefined);\n      const selected_idxs = valid_points.map(p => points.indexOf(p));\n      const isValid = (_.max(selected_idxs) || 0) - (_.min(selected_idxs) || 0) < 3;\n      if (isReady && !isValid) {\n        toastr.error('Invalid Points Set!!!');\n      }\n      this.setState({ selected_point, valid_points, isReady, isValid });\n    }\n  }\n\n  setDefault = () => {\n    const options = {\n      darkMode: this.state.darkMode,\n      number_of_players: this.state.number_of_players,\n    }\n\n    Cookies.set(DEFAULT_OPTIONS, options);\n    toastr.success(`Number of player's defaut is set to ${this.state.number_of_players}`);\n    this.setState({\n      ...options,\n      openSetting: false,\n    });\n    this.playNewRound();\n  }\n\n  settingNumber = (number_of_players) => {\n    this.setState({\n      number_of_players,\n      selected_point: Array(Number(number_of_players)).fill(undefined),\n    })\n  }\n\n  \n  calAvg = (points) => {\n    const valid_points = _.filter(points, p => p !== 999);\n    const total = _.sum(valid_points);\n    return Math.round(total / valid_points.length) || 0;\n  }\n  \n  componentDidMount = () => {\n    document.title = 'Estimation Card | Awesome Tools';\n    const options = Cookies.getJSON(DEFAULT_OPTIONS) || default_options;\n    this.setState({\n      ...options,\n      selected_point: Array(Number(options.number_of_players)).fill(undefined),\n    })\n  }\n  render() {\n    const { \n      points, number_of_players, histories, \n      selected_point, valid_points, \n      isReady, isValid,\n      openInfo, openSetting,\n      darkMode\n    } = this.state;\n\n    const keyBoardClass = [\n      'd-flex justify-content-center align-items-center',\n      'px-0',\n      'text-white',\n      ...[\n        darkMode ? 'bg-dark' : 'bg-primary'\n      ]\n    ].join(' ');\n    const startBtnTheme = darkMode ? 'dark' : 'primary';\n    const pointBtnTheme = darkMode ? 'secondary' : 'light';\n    let adjSize = number_of_players > 6 ? 3 : 4;\n    adjSize = number_of_players % 2 === 0 ? 6 : adjSize;\n    adjSize = number_of_players % 3 === 0 ? 4 : adjSize;\n    adjSize = number_of_players % 4 === 0 ? 3 : adjSize;\n    return (\n      <Container>\n        <Row>\n          <Col xs=\"10\" className=\"mt-4 px-0\">\n            <h3 className={ darkMode ? 'text-dark' : 'text-primary' }>Estimations Card</h3>\n          </Col>\n          <Col xs=\"2\" className=\"mt-4 px-0 d-flex justify-content-end align-items-start\">\n            <FontAwesomeIcon icon={faCog} className=\"mx-2\" onClick={() => this.setState({ openSetting: true })}/>  \n            <Modal className=\"modal-dialog-centered\" open={openSetting} toggle={() => this.setState({ openSetting: !openSetting })}>\n              <ModalHeader>Settings</ModalHeader>\n              <ModalBody>\n                <Row form>\n                  <Col sm=\"6\" className=\"mb-3\">\n                    <label htmlFor=\"numberOfPlayers\">Number of players</label>\n                    <FormSelect\n                      value={number_of_players}\n                      onChange={({ target: { value: number_of_players }}) => this.settingNumber(number_of_players)}\n                      style={{ fontSize: '16px' }}>\n                      {members_option.map((o, key) => (\n                        <option key={key} value={o}>{o}</option>\n                      ))}\n                    </FormSelect>\n                  </Col>\n                  <Col sm=\"6\" className=\"mb-3\">\n                    <FormCheckbox\n                      toggle\n                      checked={darkMode}\n                      onChange={() => this.setState({ darkMode: !darkMode })}>\n                      Enable Dark Mode\n                    </FormCheckbox>\n                  </Col>\n                </Row>\n                <ModalFooter className=\"px-0\">\n                  <Button onClick={() => this.setDefault()}>Save</Button>\n                </ModalFooter>\n              </ModalBody>\n            </Modal>\n            <FontAwesomeIcon icon={faInfoCircle} className=\"ml-2\" onClick={() => this.setState({ openInfo: true })}/>  \n            <Modal className=\"modal-dialog-centered\" open={openInfo} toggle={() => this.setState({ openInfo: !openInfo })}>\n              <ModalHeader>How To Use!</ModalHeader>\n              <ModalBody>\n                <span>\n                  <strong>1:</strong> Update number of player to fix your team size\n                </span>\n                <br/>\n                <span>\n                  <strong>2:</strong> Press on the point that choosed\n                </span>\n                <br/>\n                <span>\n                  <strong>3:</strong> Average point will display when you  enter all member's point\n                </span>\n                <br/>\n                <span>\n                  <strong>4:</strong> You can start over by click on button at the bottom\n                </span>\n              </ModalBody>\n            </Modal>\n          </Col>\n        </Row>\n        <Row>\n          {/* <Col>\n            <Timer />\n          </Col> */}\n        </Row>\n        { number_of_players && (\n          <Row className=\"mb-3 justify-content-center align-items-center\">\n            {!(isReady && isValid) && selected_point.map((p, idx) => (\n              <Fragment>\n                <Col key={idx}\n                  className=\"p-0 d-flex\"\n                  xs={adjSize} style={{ height: '10vh' }}\n                >\n                  <Button \n                    theme={ !isValid && isReady && (p === _.min(valid_points) || p === _.max(valid_points)) ? 'danger': pointBtnTheme } \n                    squared block className=\"h-100 border-white\"\n                    style={{ fontSize: '2em' }}\n                  >{p === undefined ? '-' : p === 999 ? '?' : p}</Button>\n                </Col>\n              </Fragment>\n            ))}\n            {isReady && isValid && (\n              <Col className=\"p-0 d-flex justify-content-center align-items-center\" style={{ height: '10vh' }}>\n                  <h1 className=\"d-flex display-3 text-success\">\n                    {this.calAvg(selected_point)}\n                  </h1>\n              </Col>\n            )}\n          </Row>\n        )}\n        <Row className=\"mb-3\">\n          { points.map((p, idx) => (\n            <Col key={idx} xs={4} \n              style={{ height: '10vh', border: '1px solid #fff' }}\n              className={keyBoardClass}\n              onTouchEnd={() => this.play(p)}\n            >\n              <span className=\"d-flex\" style={{ fontSize: '3em' }}>{p === 999 ? '?' : p}</span>\n            </Col>\n          )) }\n        </Row>\n        <Row className=\"mb-3\">\n          <Col className=\"px-0\">\n            <Button theme={startBtnTheme} squared block size=\"lg\" onClick={() => this.playNewRound()}>Start Over</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"px-0\">\n            <ListGroup>\n              {histories.reverse().map((h, idx) => (\n                <ListGroupItem className=\"d-flex\" key={idx}>\n                  <Row className=\"w-100\">\n                  { h.map((p, i) => (\n                    <Col className=\"d-flex justify-content-center\" key={i}>{p === 999 ? '?' : p}</Col>\n                  )) }\n                  <Col className=\"d-flex justify-content-center text-success\">\n                    <strong>{this.calAvg(h)}</strong>\n                  </Col>\n                  </Row>\n                </ListGroupItem>\n              ))}\n            </ListGroup>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default ScrumEstimationCard;","import React from 'react';\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Route,\n  // Link,\n  Switch,\n  Redirect,\n  // useLocation\n} from 'react-router-dom';\n\nimport './assets/index.scss';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\";\nimport \"toastr/build/toastr.min.css\";\n\nimport { MasterLayout } from './components/layouts';\nimport ErrorPage from './views/ErrorPage';\nimport MobTimer from './views/MobTimer';\nimport ScrumEstimationCard from './views/ScrumEstimationCard';\n\nfunction App() {\n  return (\n    <Router>\n      <MasterLayout>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/estimation_card\" />\n          </Route>\n          <Route exact path=\"/mob\">\n            <MobTimer />\n          </Route>\n          <Route exact path=\"/estimation_card\">\n            <ScrumEstimationCard />\n          </Route>\n          <Route path=\"/*\">\n            <ErrorPage />\n          </Route>\n        </Switch>\n      </MasterLayout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}